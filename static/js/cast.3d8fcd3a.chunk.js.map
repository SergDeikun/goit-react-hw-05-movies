{"version":3,"file":"static/js/cast.3d8fcd3a.chunk.js","mappings":"qPAEaA,EAAWC,EAAAA,GAAAA,GAAH,6CAGRC,EAAOD,EAAAA,GAAAA,EAAH,kH,SC2BjB,EA7BiB,SAAC,GAAc,IAAZE,EAAW,EAAXA,KAClB,OACE,+BACE,SAACH,EAAD,UACGG,EAAKC,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAEnC,OADAC,QAAQC,IAAIJ,IAEV,2BACE,gBACEK,IAAG,0CAEkCL,GAErCM,IAAKL,KAEP,SAACL,EAAD,UAAOK,KACP,UAACL,EAAD,yBAAkBM,OATXH,WCSrB,EAba,WACX,IAAQQ,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeN,GAASO,MAAK,YAAe,IAAZJ,EAAW,EAAXA,KAC9BC,EAAQD,QAET,CAACH,KAEG,8BAAGG,IAAQ,SAAC,EAAD,CAAUb,KAAMa,Q,0MCfpCK,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAECC,EAAkB,mCAAG,oGACTF,GAAAA,CAAM,+BAAD,OACKC,EADL,2BADI,cAC1BE,EAD0B,yBAKzBA,EAASrB,MALgB,2CAAH,qDAQlBsB,EAAiB,mCAAG,WAAMC,GAAN,uFACRL,GAAAA,CAAM,wBAAD,OACFC,EADE,kBACWI,EADX,+CADG,cACzBF,EADyB,yBAKxBA,EAASrB,MALe,2CAAH,sDAQjBwB,EAAkB,mCAAG,WAAMtB,GAAN,uFACTgB,GAAAA,CAAM,UAAD,OAAWhB,EAAX,oBAAyBiB,EAAzB,oBADI,cAC1BE,EAD0B,yBAGzBA,EAASrB,MAHgB,2CAAH,sDAMlBgB,EAAc,mCAAG,WAAMd,GAAN,uFACLgB,GAAAA,CAAM,UAAD,OAChBhB,EADgB,4BACMiB,EADN,oBADA,cACtBE,EADsB,yBAIrBA,EAASrB,MAJY,2CAAH,sDAOdyB,EAAiB,mCAAG,WAAMvB,GAAN,uFACRgB,GAAAA,CAAM,UAAD,OAChBhB,EADgB,4BACMiB,EADN,2BADG,cACzBE,EADyB,yBAIxBA,EAASrB,MAJe,2CAAH","sources":["components/castInfo/castInfo.styled.js","components/castInfo/castInfo.jsx","pages/cast/cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style: none;\n`;\nexport const Text = styled.p`\n  font-weight: 600;\n  line-height: 1.14;\n  letter-spacing: 0.03em;\n  font-size: 16px;\n`;\n","import PropTypes from 'prop-types';\nimport { CastList, Text } from './castInfo.styled';\n\nconst CastInfo = ({ data }) => {\n  return (\n    <>\n      <CastList>\n        {data.map(({ id, profile_path, name, character }) => {\n          console.log(profile_path);\n          return (\n            <li key={id}>\n              <img\n                src={\n                  // profile_path &&\n                  `https://image.tmdb.org/t/p/w200/${profile_path}`\n                }\n                alt={name}\n              />\n              <Text>{name}</Text>\n              <Text>Character: {character}</Text>\n            </li>\n          );\n        })}\n      </CastList>\n    </>\n  );\n};\n\nCastInfo.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n\nexport default CastInfo;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchCastMovie } from 'services/api';\nimport CastInfo from 'components/castInfo/castInfo';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    fetchCastMovie(movieId).then(({ cast }) => {\n      setCast(cast);\n    });\n  }, [movieId]);\n\n  return <>{cast && <CastInfo data={cast} />}</>;\n};\n\nexport default Cast;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = 'ad1bc7edbb361d4c2586895572eb3a0c';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios(\n    `/trending/movie/day?api_key=${KEY}&language=en-US&page=1`\n  );\n\n  return response.data;\n};\n\nexport const fetchSearchMovies = async searchQuery => {\n  const response = await axios(\n    `search/movie?api_key=${KEY}&query=${searchQuery}&language=en-US&page=1&include_adult=false`\n  );\n\n  return response.data;\n};\n\nexport const fetchMmovieDetails = async id => {\n  const response = await axios(`/movie/${id}?api_key=${KEY}&language=en-US`);\n\n  return response.data;\n};\n\nexport const fetchCastMovie = async id => {\n  const response = await axios(\n    `/movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchReviewsMovie = async id => {\n  const response = await axios(\n    `/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n"],"names":["CastList","styled","Text","data","map","id","profile_path","name","character","console","log","src","alt","movieId","useParams","useState","cast","setCast","useEffect","fetchCastMovie","then","axios","KEY","fetchPopularMovies","response","fetchSearchMovies","searchQuery","fetchMmovieDetails","fetchReviewsMovie"],"sourceRoot":""}